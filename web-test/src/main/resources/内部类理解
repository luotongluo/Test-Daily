https://www.baidu.com/link?url=ELMzIToy0zI8yz706R94iZFCpvdNGag20ykZ6lnyTvhiexKatMblFUAGMoaoM8NldpCBMuxR69WlUAO0CQZhn_&wd=&eqid=ab3156000024022e000000035e7d9ae7
https://www.cnblogs.com/yangming1996/p/7217829.html?utm_source=itdadao&utm_medium=referral
可以将一个类定义在另一个类或方法中，这样的类叫做内部类 --《Thinking in Java》

说起内部类，大家并不陌生，并且会经常在实例化容器的时候使用到它。但是内部类的具体细节语法，原理以及实现是什么样的可以不少人都还挺陌生，这里作一篇总结，希望通过这篇总结提高对内部类的认识。

内部类的定义为：定义在另一个类或方法中的类。而根据使用场景的不同，内部类还可以分为四种：成员内部类，局部内部类，匿名内部类和静态内部类。

1. 完善多重继承
 1.在早期C++作为面向对象编程语言的时候，最难处理的也就是多重继承，多重继承对于代码耦合度，代码使用人员的理解来说，并不怎么友好，并且还要比较出名的死亡菱形的多重继承问题。因此Java并不支持多继承。
 2.后来，Java设计者发现，没有多继承，一些代码友好的设计与编程问题变得十分难以解决。于是便产生了内部类。内部类具有：隐式包含外部类对象并且能够与之通信的特点，完美的解决了多重继承的问题。

2. 解决多次实现/继承问题
 1.
有时候在一个类中，需要多次通过不同的方式实现同一个接口，如果没有内部类，必须多次定义不同数量的类，但是使用内部类可以很好的解决这个问题，每个内部类都可以实现同一个接口，即实现了代码的封装，又实现了同一接口不同的实现。

2.
内部类可以将组合的实现封装在内部中。

1.成员内部类作为类级成员，因此能被访问修饰符所修饰
 2.成员内部类中包含创建内部类时对外部类对象的引用，所以成员内部类能访问外部类的所有成员。
 3.语法规定：因为它作为外部类的一部分成员，所以即使private的对象，内部类也能访问。。通过Outer.access$ 指令访问
 4.如同非静态方法不能访问静态成员一样，非静态内部类也被设计的不能拥有静态变量，因此内部类不能定义static对象和方法。

不涉及到类成员方法和成员变量的方法，最好定义为static

